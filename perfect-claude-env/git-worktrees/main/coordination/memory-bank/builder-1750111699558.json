{
  "id": "b993bece-9f31-462d-83a7-1118d66ef7af",
  "content": "// Command Processing Backend with Natural Language Parsing\nexport class CommandProcessor extends EventEmitter {\n  private taskBoardPath: string;\n  private agentCapabilities: Map<string, AgentCapability> = new Map();\n  private commandPatterns: Map<CommandType, RegExp[]> = new Map();\n\n  constructor(coordinationPath: string) {\n    super();\n    this.taskBoardPath = path.join(coordinationPath, 'task-board.json');\n    this.initializeCommandPatterns();\n    this.initializeAgentCapabilities();\n  }\n\n  private initializeCommandPatterns() {\n    this.commandPatterns.set('status_query', [\n      /show\\s+(agent|system|current)\\s+status/i,\n      /what.*status/i,\n      /how.*doing/i,\n      /give.*status/i\n    ]);\n\n    this.commandPatterns.set('task_list', [\n      /list\\s+(tasks|active\\s+tasks|pending\\s+tasks)/i,\n      /show.*tasks/i,\n      /what.*tasks/i,\n      /current.*tasks/i\n    ]);\n\n    this.commandPatterns.set('task_create', [\n      /create\\s+(a\\s+)?task/i,\n      /add\\s+(a\\s+)?task/i,\n      /new\\s+task/i,\n      /i\\s+need\\s+to\\s+create/i\n    ]);\n  }\n\n  async processCommand(input: string): Promise<CommandResponse> {\n    const command: Command = {\n      id: this.generateCommandId(),\n      type: this.parseCommandType(input),\n      input: input.trim(),\n      timestamp: new Date()\n    };\n\n    try {\n      const response = await this.executeCommand(command);\n      this.emit('commandProcessed', { command, response });\n      return response;\n    } catch (error) {\n      // Error handling...\n    }\n  }\n\n  private parseCommandType(input: string): CommandType {\n    for (const [type, patterns] of this.commandPatterns.entries()) {\n      if (patterns.some(pattern => pattern.test(input))) {\n        return type;\n      }\n    }\n    return 'unknown';\n  }\n\n  private async handleTaskCreate(command: Command): Promise<CommandResponse> {\n    const taskTitle = this.extractTaskTitle(command.input);\n    const assignedAgent = this.determineOptimalAgent(command.input);\n\n    if (!taskTitle) {\n      return {\n        id: command.id,\n        success: false,\n        message: 'I need more details to create a task. Please specify what task you want to create.',\n        timestamp: new Date()\n      };\n    }\n\n    try {\n      const taskBoard = await this.loadTaskBoard();\n      const newTaskId = `TASK-${String(taskBoard.tasks.length + 101).padStart(3, '0')}`;\n      \n      const newTask = {\n        id: newTaskId,\n        title: taskTitle,\n        description: `Task created from AI command: ${command.input}`,\n        status: 'TODO',\n        priority: 'MEDIUM',\n        assignedTo: assignedAgent,\n        createdBy: 'ai-assistant',\n        createdAt: new Date().toISOString(),\n        // ... more task properties\n      };\n\n      taskBoard.tasks.push(newTask);\n      taskBoard.agents[assignedAgent].activeTasks.push(newTaskId);\n      await this.saveTaskBoard(taskBoard);\n\n      return {\n        id: command.id,\n        success: true,\n        data: newTask,\n        message: `Created task ${newTaskId}: \"${taskTitle}\" assigned to ${assignedAgent}`,\n        timestamp: new Date()\n      };\n    } catch (error) {\n      throw new Error(`Failed to create task: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private determineOptimalAgent(input: string): string {\n    const inputLower = input.toLowerCase();\n    \n    // Check for frontend/UI keywords\n    if (inputLower.includes('frontend') || inputLower.includes('ui') || \n        inputLower.includes('component') || inputLower.includes('react')) {\n      return 'builder';\n    }\n    \n    // Check for backend keywords  \n    if (inputLower.includes('backend') || inputLower.includes('api') || \n        inputLower.includes('server') || inputLower.includes('database')) {\n      return 'builder';\n    }\n    \n    // Check for architecture keywords\n    if (inputLower.includes('design') || inputLower.includes('architecture') || \n        inputLower.includes('plan') || inputLower.includes('spec')) {\n      return 'architect';\n    }\n    \n    // Check for testing keywords\n    if (inputLower.includes('test') || inputLower.includes('validation') || \n        inputLower.includes('quality') || inputLower.includes('review')) {\n      return 'validator';\n    }\n    \n    // Default to builder for implementation tasks\n    return 'builder';\n  }\n}\n\n// Vercel AI SDK Compatible API Endpoint\nrouter.post('/chat', async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { messages } = req.body;\n    const lastMessage = messages[messages.length - 1];\n    const response = await commandProcessor.processCommand(lastMessage.content);\n\n    // Set headers for streaming response\n    res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n    res.setHeader('Transfer-Encoding', 'chunked');\n    res.setHeader('Cache-Control', 'no-cache');\n\n    // Format response with structured data\n    let formattedResponse = response.message;\n    \n    if (response.data && response.success) {\n      if (response.data.agents) {\n        formattedResponse += '\\n\\nðŸ“Š **Agent Status:**\\n';\n        response.data.agents.forEach((agent: any) => {\n          formattedResponse += `â€¢ **${agent.name}**: ${agent.activeTasks} active, ${agent.completedTasks} completed\\n`;\n        });\n      }\n    }\n\n    // Stream the response with typing effect\n    const chars = formattedResponse.split('');\n    for (let i = 0; i < chars.length; i++) {\n      res.write(chars[i]);\n      const delay = chars[i] === '\\n' ? 100 : Math.random() * 30 + 10;\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n    \n    res.end();\n  } catch (error) {\n    // Error handling...\n  }\n});",
  "description": "Command processing backend with natural language parsing, agent routing, task creation automation, and Vercel AI SDK integration",
  "tags": [
    "backend",
    "command-processing",
    "natural-language",
    "agent-routing",
    "task-automation",
    "vercel-ai-sdk",
    "streaming"
  ],
  "agentId": "builder",
  "timestamp": "2025-06-16T22:08:19.558Z"
}