{
  "id": "addca101-1aca-42b5-a003-420ffa38301d",
  "content": "// AI Chat Component with Vercel AI SDK Integration\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useChat } from 'ai/react';\n\nexport const Chat: React.FC = () => {\n  const { messages, input, handleInputChange, handleSubmit, isLoading, error } = useChat({\n    api: '/api/chat',\n    onError: (error) => {\n      console.error('Chat error:', error);\n    }\n  });\n\n  const [showQuickActions, setShowQuickActions] = useState(true);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Quick actions for common commands\n  const quickActions: QuickAction[] = [\n    {\n      id: 'status',\n      label: 'Show Agent Status',\n      prompt: 'Show me the current status of all agents',\n      icon: <CpuChipIcon className=\"h-4 w-4\" />,\n      category: 'monitoring'\n    }\n    // ... more actions\n  ];\n\n  const handleQuickAction = (action: QuickAction) => {\n    const syntheticEvent = {\n      target: { value: action.prompt },\n      preventDefault: () => {}\n    } as React.ChangeEvent<HTMLInputElement>;\n    \n    handleInputChange(syntheticEvent);\n    setShowQuickActions(false);\n    \n    setTimeout(() => {\n      inputRef.current?.focus();\n    }, 100);\n  };\n\n  // Show quick actions when input is empty and no messages\n  useEffect(() => {\n    setShowQuickActions(input.length === 0 && messages.length === 0);\n  }, [input, messages.length]);\n\n  return (\n    <div className=\"flex flex-col h-full max-h-[600px] bg-white rounded-lg shadow-sm border border-gray-200\">\n      {/* Header */}\n      <div className=\"flex-shrink-0 px-4 py-3 border-b border-gray-200 bg-gray-50 rounded-t-lg\">\n        <div className=\"flex items-center space-x-2\">\n          <CommandLineIcon className=\"h-5 w-5 text-blue-600\" />\n          <h3 className=\"text-sm font-medium text-gray-900\">AI Assistant</h3>\n          <span className=\"text-xs text-gray-500\">Ask me about agents, tasks, or system status</span>\n        </div>\n      </div>\n\n      {/* Messages Area */}\n      <div className=\"flex-1 overflow-hidden flex flex-col\">\n        {messages.length === 0 && showQuickActions ? (\n          <div className=\"flex-1 p-4\">\n            <QuickActions actions={quickActions} onActionSelect={handleQuickAction} />\n          </div>\n        ) : (\n          <div className=\"flex-1 overflow-y-auto\">\n            <MessageList messages={messages} isLoading={isLoading} />\n          </div>\n        )}\n      </div>\n\n      {/* Input Area */}\n      <div className=\"flex-shrink-0 border-t border-gray-200 p-4\">\n        {error && (\n          <div className=\"mb-3 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700\">\n            Error: {error.message}\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n          <input\n            ref={inputRef}\n            value={input}\n            placeholder=\"Ask about agents, tasks, or system status...\"\n            onChange={handleInputChange}\n            disabled={isLoading}\n            className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500\"\n          />\n          <button\n            type=\"submit\"\n            disabled={isLoading || !input.trim()}\n            className=\"inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {isLoading ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n            ) : (\n              <PaperAirplaneIcon className=\"h-4 w-4\" />\n            )}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};",
  "description": "Complete AI chat component implementation with Vercel AI SDK, streaming responses, quick actions, and message history",
  "tags": [
    "frontend",
    "ai",
    "chat",
    "vercel-ai-sdk",
    "react",
    "streaming",
    "quick-actions"
  ],
  "agentId": "builder",
  "timestamp": "2025-06-16T22:00:54.338Z"
}