{
  "id": "5af31ede-d7ce-4b21-adb1-5907240710e8",
  "content": "## File System Monitor Service Pattern for Node.js\n\n### Dependencies\n```json\n{\n  \"dependencies\": {\n    \"chokidar\": \"^4.0.3\",\n    \"simple-git\": \"^3.28.0\",\n    \"ws\": \"^8.18.2\"\n  },\n  \"devDependencies\": {\n    \"@types/chokidar\": \"^1.7.5\",\n    \"@types/ws\": \"^8.18.1\"\n  }\n}\n```\n\n### FileMonitor Service Implementation\n```typescript\nimport { EventEmitter } from 'events';\nimport chokidar, { FSWatcher } from 'chokidar';\nimport simpleGit, { SimpleGit, DefaultLogFields } from 'simple-git';\n\nexport class FileMonitor extends EventEmitter {\n  private watchers: Map<string, FSWatcher> = new Map();\n  private gitInstances: Map<string, SimpleGit> = new Map();\n  \n  async addAgent(agentId: string, worktreePath: string): Promise<void> {\n    // Initialize git instance\n    const git = simpleGit(worktreePath);\n    this.gitInstances.set(agentId, git);\n    \n    // Set up file watcher\n    const watcher = chokidar.watch(worktreePath, {\n      ignored: [/(^|[\\/\\\\])\\.\\./, /node_modules/, /dist/, /build/, /.git/],\n      persistent: true,\n      ignoreInitial: true,\n      awaitWriteFinish: {\n        stabilityThreshold: 500,\n        pollInterval: 100\n      }\n    });\n    \n    // Handle file events\n    watcher\n      .on('add', (path) => this.handleFileEvent('add', path, agentId))\n      .on('change', (path) => this.handleFileEvent('change', path, agentId))\n      .on('unlink', (path) => this.handleFileEvent('unlink', path, agentId));\n  }\n}\n```\n\n### WebSocket Real-time Events\n```typescript\nimport { WebSocketServer, WebSocket } from 'ws';\n\nexport class WebSocketHandler {\n  private wss: WebSocketServer;\n  private clients: Set<WebSocket> = new Set();\n  \n  constructor(server: Server, monitoringService: MonitoringService) {\n    this.wss = new WebSocketServer({ server });\n    \n    this.wss.on('connection', (ws: WebSocket) => {\n      this.clients.add(ws);\n      \n      ws.on('close', () => {\n        this.clients.delete(ws);\n      });\n    });\n    \n    // Forward monitoring events\n    monitoringService.on('fileChange', (event) => {\n      this.broadcast({ type: 'fileChange', data: event });\n    });\n  }\n  \n  private broadcast(message: any) {\n    const messageStr = JSON.stringify(message);\n    this.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  }\n}\n```\n\n### REST API Routes\n```typescript\nrouter.get('/metrics', async (req, res) => {\n  const metrics = await monitoringService.getSystemMetrics();\n  res.json(metrics);\n});\n\nrouter.get('/agents/:agentId', async (req, res) => {\n  const metrics = await monitoringService.getAgentMetrics(req.params.agentId);\n  res.json(metrics);\n});\n\nrouter.get('/activity', (req, res) => {\n  const limit = parseInt(req.query.limit) || 50;\n  const activity = monitoringService.getRecentActivity(limit);\n  res.json(activity);\n});\n```\n\n### Key Patterns:\n1. **Event-driven architecture** using EventEmitter for decoupling\n2. **File watching** with chokidar for cross-platform compatibility\n3. **Git monitoring** with simple-git for repository tracking\n4. **WebSocket integration** for real-time updates\n5. **Graceful error handling** and recovery\n6. **Configurable ignore patterns** for file watching\n7. **Polling for git changes** to detect new commits\n8. **REST + WebSocket** hybrid API for flexibility\n\n### Integration with Express:\n```typescript\nconst server = createServer(app);\nconst monitoringService = new MonitoringService(config);\nawait monitoringService.initialize();\nnew WebSocketHandler(server, monitoringService);\napp.use('/api/v1/monitoring', createMonitoringRouter(monitoringService));\n```",
  "description": "File system and git monitoring service pattern with WebSocket real-time events for Node.js",
  "tags": [
    "monitoring",
    "file-system",
    "git",
    "websocket",
    "nodejs",
    "backend",
    "service"
  ],
  "agentId": "builder",
  "timestamp": "2025-06-16T21:25:50.128Z"
}