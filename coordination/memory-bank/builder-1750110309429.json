{
  "id": "94bd4390-7266-46d1-8f69-dc67f04e00ea",
  "content": "## React + Vite + TypeScript + Tailwind CSS Dashboard Setup Pattern\n\n### Project Initialization\n```bash\nnpm create vite@latest src/frontend -- --template react-ts\ncd src/frontend && npm install\nnpm install -D tailwindcss@^3.4.0 postcss autoprefixer @tailwindcss/forms\nnpm install @heroicons/react recharts date-fns clsx\n```\n\n### Tailwind CSS Configuration\n```javascript\n// tailwind.config.js\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n  ],\n}\n\n// postcss.config.js\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n### Base CSS Setup\n```css\n/* src/index.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: 'Inter var', 'Inter', system-ui, sans-serif;\n}\n\n.card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6;\n}\n\n.btn {\n  @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;\n}\n\n.btn-primary {\n  @apply btn bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500;\n}\n\n.badge {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n}\n```\n\n### Folder Structure\n```\nsrc/frontend/\n├── src/\n│   ├── components/\n│   │   ├── Dashboard.tsx\n│   │   ├── MetricsCard.tsx\n│   │   ├── AgentStatusGrid.tsx\n│   │   └── ActivityFeed.tsx\n│   ├── pages/\n│   ├── hooks/\n│   ├── utils/\n│   │   └── cn.ts\n│   ├── types/\n│   │   └── monitoring.ts\n│   ├── services/\n│   ├── App.tsx\n│   ├── main.tsx\n│   └── index.css\n├── package.json\n├── tailwind.config.js\n├── postcss.config.js\n├── tsconfig.json\n└── vite.config.ts\n```\n\n### Dashboard Component Pattern\n```typescript\nimport React, { useState, useEffect } from 'react';\nimport { MetricsCard } from './MetricsCard';\nimport { ActivityFeed } from './ActivityFeed';\nimport { AgentStatusGrid } from './AgentStatusGrid';\n\nexport const Dashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/v1/monitoring/agents');\n        const data = await response.json();\n        setMetrics(data);\n      } catch (err) {\n        console.error('Failed to fetch metrics:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMetrics();\n    const interval = setInterval(fetchMetrics, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard</h1>\n        </div>\n      </header>\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <AgentStatusGrid agents={metrics} />\n          </div>\n          <div className=\"lg:col-span-1\">\n            <ActivityFeed />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n```\n\n### TypeScript Types Pattern\n```typescript\n// src/types/monitoring.ts\nexport interface AgentMetrics {\n  agentId: string;\n  totalFiles: number;\n  totalCommits: number;\n  lastActivity: Date;\n  filesChanged: number;\n  linesAdded: number;\n  linesRemoved: number;\n}\n\nexport interface SystemMetrics {\n  totalAgents: number;\n  activeAgents: number;\n  totalCommits: number;\n  totalFiles: number;\n  recentActivity: Array<FileChangeEvent | GitCommitEvent>;\n}\n```\n\n### Real-time Data Fetching Pattern\n```typescript\n// Polling pattern for real-time updates\nuseEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/endpoint');\n      const data = await response.json();\n      setState(data);\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  };\n\n  fetchData();\n  const interval = setInterval(fetchData, 5000); // 5 second polling\n  return () => clearInterval(interval);\n}, []);\n```\n\n### Key Features:\n1. **Modern Stack**: React 19 + Vite + TypeScript + Tailwind CSS 3.x\n2. **Component Architecture**: Modular, reusable components\n3. **Real-time Updates**: Polling-based data fetching every 5 seconds\n4. **Responsive Design**: Mobile-first approach with Tailwind\n5. **Type Safety**: Full TypeScript coverage with proper interfaces\n6. **Performance**: Vite for fast development and optimized builds\n7. **Accessibility**: Heroicons for consistent iconography\n8. **Styling**: Component classes with Tailwind utilities\n9. **Error Handling**: Proper loading states and error boundaries",
  "description": "Complete React dashboard setup pattern with Vite, TypeScript, Tailwind CSS and real-time monitoring components",
  "tags": [
    "frontend",
    "react",
    "vite",
    "typescript",
    "tailwind",
    "dashboard",
    "monitoring",
    "realtime"
  ],
  "agentId": "builder",
  "timestamp": "2025-06-16T21:45:09.429Z"
}