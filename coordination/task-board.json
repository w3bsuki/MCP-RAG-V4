{
  "version": "1.0.0",
  "lastUpdated": "2025-06-17T12:00:00Z",
  "updatedBy": "architect",
  "sprint": {
    "id": "SPRINT-003",
    "name": "Crypto Vision TDD Implementation",
    "status": "ACTIVE",
    "startDate": "2025-06-17",
    "endDate": "2025-06-24"
  },
  "tasks": [
    {
      "id": "TASK-P3-001",
      "title": "Implement PriceService Class (Part 1)",
      "description": "Create PriceService class with WebSocket connection to Binance. Make first 5 tests pass: connection establishment, price updates, multiple symbols, error handling, and event emission.",
      "status": "TODO",
      "priority": "CRITICAL",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": [],
      "tags": ["crypto-vision", "tdd", "websocket", "service"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "PriceService class created extending EventEmitter",
        "WebSocket connection to Binance working",
        "Price update events emitted correctly",
        "First 5 tests passing in priceService.test.ts",
        "Coverage > 30% for PriceService"
      ],
      "testFile": "tests/unit/lib/priceService.test.ts",
      "targetTests": 5,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-002",
      "title": "Complete PriceService Implementation",
      "description": "Implement remaining PriceService functionality: historical prices, technical indicators, reconnection logic, and disconnect. Make all 16 tests pass.",
      "status": "TODO",
      "priority": "CRITICAL",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-001"],
      "tags": ["crypto-vision", "tdd", "technical-indicators"],
      "estimatedHours": 1.5,
      "actualHours": 0,
      "completionCriteria": [
        "getHistoricalPrices method implemented",
        "getTechnicalIndicators calculating RSI, MACD, Bollinger Bands",
        "Reconnection logic working",
        "All 16 tests passing",
        "Coverage > 95% for PriceService"
      ],
      "testFile": "tests/unit/lib/priceService.test.ts",
      "targetTests": 16,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-003",
      "title": "Start PredictionEngine Implementation",
      "description": "Create PredictionEngine class with Claude API integration. Implement prediction generation and confidence calculation. Make first 5 tests pass.",
      "status": "TODO",
      "priority": "CRITICAL",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-002"],
      "tags": ["crypto-vision", "tdd", "ai", "claude"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "PredictionEngine class created",
        "generatePrediction method working",
        "Claude prompt building implemented",
        "First 5 tests passing",
        "Mock Claude API for tests"
      ],
      "testFile": "tests/unit/lib/predictionEngine.test.ts",
      "targetTests": 5,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-004",
      "title": "Complete PredictionEngine with Caching",
      "description": "Implement prediction caching, rate limiting, and remaining PredictionEngine features. Make all 15 tests pass.",
      "status": "TODO",
      "priority": "HIGH",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-003"],
      "tags": ["crypto-vision", "tdd", "caching", "rate-limiting"],
      "estimatedHours": 1.5,
      "actualHours": 0,
      "completionCriteria": [
        "Prediction caching with TTL",
        "Rate limiting implemented",
        "All market scenarios handled",
        "All 15 tests passing",
        "Coverage > 95% for PredictionEngine"
      ],
      "testFile": "tests/unit/lib/predictionEngine.test.ts",
      "targetTests": 15,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-005",
      "title": "Implement API Routes for Predictions",
      "description": "Create Next.js API routes for POST /api/predictions and GET /api/predictions/[coin]. Implement validation, rate limiting, and caching.",
      "status": "TODO",
      "priority": "HIGH",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-004"],
      "tags": ["crypto-vision", "tdd", "api", "nextjs"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "API routes created in app/api/predictions",
        "Request validation with Zod",
        "Rate limiting middleware",
        "All 12 API tests passing",
        "Proper error responses"
      ],
      "testFile": "tests/integration/api/predictions.test.ts",
      "targetTests": 12,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-006",
      "title": "Implement PriceDisplay Component",
      "description": "Create PriceDisplay React component with real-time updates, loading states, and error handling. Make all 11 component tests pass.",
      "status": "TODO",
      "priority": "HIGH",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-002"],
      "tags": ["crypto-vision", "tdd", "react", "component"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "PriceDisplay component created",
        "useCryptoPrice hook implemented",
        "Loading and error states",
        "Price formatting utilities",
        "All 11 tests passing"
      ],
      "testFile": "tests/unit/components/PriceDisplay.test.tsx",
      "targetTests": 11,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-007",
      "title": "Implement CoverageMonitor Service",
      "description": "Create CoverageMonitor service to track test coverage, generate badges, and enforce thresholds. Make all 12 tests pass.",
      "status": "TODO",
      "priority": "MEDIUM",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": [],
      "tags": ["crypto-vision", "tdd", "testing", "monitoring"],
      "estimatedHours": 0.5,
      "actualHours": 0,
      "completionCriteria": [
        "CoverageMonitor class created",
        "Coverage report parsing",
        "Badge generation working",
        "Threshold enforcement",
        "All 12 tests passing"
      ],
      "testFile": "tests/unit/lib/coverageMonitor.test.ts",
      "targetTests": 12,
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-008",
      "title": "Database Schema Implementation",
      "description": "Create database migrations for users, predictions, alerts, and api_usage tables based on DATABASE_SCHEMA.md. Set up Neon PostgreSQL.",
      "status": "TODO",
      "priority": "HIGH",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-005"],
      "tags": ["crypto-vision", "database", "postgresql"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "Neon PostgreSQL configured",
        "All tables created with proper indexes",
        "Test data generators working",
        "Migration scripts complete",
        "Connection pool configured"
      ],
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-009",
      "title": "Verify 95% Test Coverage",
      "description": "Run all tests, verify 95% coverage is achieved, fix any gaps, and ensure pre-commit hooks are working correctly.",
      "status": "TODO",
      "priority": "CRITICAL",
      "assignedTo": "validator",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-001", "TASK-P3-002", "TASK-P3-003", "TASK-P3-004", "TASK-P3-005", "TASK-P3-006", "TASK-P3-007"],
      "tags": ["crypto-vision", "testing", "validation", "coverage"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "All 66 tests passing",
        "Coverage â‰¥ 95% for all modules",
        "Pre-commit hooks preventing bad commits",
        "Coverage report generated",
        "No TypeScript errors"
      ],
      "blockers": [],
      "comments": []
    },
    {
      "id": "TASK-P3-010",
      "title": "Create Basic UI Layout",
      "description": "Implement basic dashboard layout with navigation, integrate PriceDisplay component, and ensure responsive design.",
      "status": "TODO",
      "priority": "MEDIUM",
      "assignedTo": "builder",
      "createdBy": "architect",
      "createdAt": "2025-06-17T12:00:00Z",
      "updatedAt": "2025-06-17T12:00:00Z",
      "dependencies": ["TASK-P3-006"],
      "tags": ["crypto-vision", "frontend", "ui", "layout"],
      "estimatedHours": 1,
      "actualHours": 0,
      "completionCriteria": [
        "Dashboard layout created",
        "Navigation working",
        "PriceDisplay integrated",
        "Responsive on mobile",
        "Dark mode support"
      ],
      "blockers": [],
      "comments": []
    }
  ],
  "taskStatuses": ["TODO", "IN_PROGRESS", "REVIEW", "BLOCKED", "DONE", "VERIFIED"],
  "priorities": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
  "agents": {
    "architect": {
      "id": "architect",
      "name": "System Architect",
      "activeTasks": [],
      "completedTasks": []
    },
    "builder": {
      "id": "builder",
      "name": "Full-Stack Builder",
      "activeTasks": ["TASK-P3-001", "TASK-P3-002", "TASK-P3-003", "TASK-P3-004", "TASK-P3-005", "TASK-P3-006", "TASK-P3-007", "TASK-P3-008", "TASK-P3-010"],
      "completedTasks": []
    },
    "validator": {
      "id": "validator",
      "name": "Quality Validator",
      "activeTasks": ["TASK-P3-009"],
      "completedTasks": []
    }
  },
  "metrics": {
    "totalTasks": 10,
    "completedTasks": 0,
    "inProgressTasks": 0,
    "blockedTasks": 0,
    "targetCoverage": 95,
    "currentCoverage": 0,
    "testsWritten": 66,
    "testsPassing": 0
  }
}