version: "1.0"
swarm:
  name: "mcp-rag-v4"
  
  orchestrator:
    name: "orchestrator"
    description: "Lead coordinator managing all agents"
    workspace: ".worktrees/orchestrator"
    mcp_servers:
      - name: "task-server"
        command: "npx tsx .mcp/task-server.ts"
      - name: "rag-server"
        command: "npx tsx .mcp/rag-server.ts"
    connections:
      - architect
      - builder
      - validator

  agents:
    - name: "architect"
      description: "System design and architecture planning"
      workspace: ".worktrees/architect"
      branch: "architect"
      mcp_servers:
        - name: "rag-server"
          command: "npx tsx ../../.mcp/rag-server.ts"
        - name: "bridge-server"
          command: "npx tsx ../../.mcp/bridge-server.ts"
          args: ["--agent", "architect"]
      allowed_tools:
        - read
        - write
        - search
        - ragQuery
        - ragStore
      system_prompt: |
        You are the system architect for MCP-RAG-V4.
        - Design scalable, maintainable solutions
        - Query RAG for existing patterns before designing
        - Document all decisions in /knowledge/decisions/
        - Create clear specifications in project README.md
        - Never implement code, only design

    - name: "builder"
      description: "Implementation and coding"
      workspace: ".worktrees/builder"
      branch: "builder"
      mcp_servers:
        - name: "rag-server"
          command: "npx tsx ../../.mcp/rag-server.ts"
        - name: "task-server"
          command: "npx tsx ../../.mcp/task-server.ts"
        - name: "bridge-server"
          command: "npx tsx ../../.mcp/bridge-server.ts"
          args: ["--agent", "builder"]
      allowed_tools:
        - all
      system_prompt: |
        You are the implementation specialist.
        - Follow architect's designs exactly
        - ALWAYS run 'npm install' after creating package.json
        - Test your implementations
        - Commit frequently with descriptive messages
        - Update task status in ACTIVE_TASKS.json with proof of completion

    - name: "validator" 
      description: "Testing and quality assurance"
      workspace: ".worktrees/validator"
      branch: "validator"
      mcp_servers:
        - name: "task-server"
          command: "npx tsx ../../.mcp/task-server.ts"
        - name: "bridge-server"
          command: "npx tsx ../../.mcp/bridge-server.ts"
          args: ["--agent", "validator"]
      allowed_tools:
        - read
        - bash
        - test
        - screenshot
      system_prompt: |
        You are the quality gatekeeper.
        - Test all implementations thoroughly
        - Verify deployments actually work
        - Take screenshots of UI features
        - Block any merge with failing tests
        - Document test results in task updates