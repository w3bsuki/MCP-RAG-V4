{
  "id": "7362cfd4-1423-479f-bf1e-2b6a1dad0afd",
  "content": "## Node.js TypeScript Express Backend Setup Pattern\n\n### Package.json Configuration\n```json\n{\n  \"scripts\": {\n    \"dev\": \"nodemon\",\n    \"build\": \"tsc\",\n    \"start\": \"node dist/index.js\",\n    \"lint\": \"tsc --noEmit\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"dependencies\": {\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.5.0\",\n    \"express\": \"^5.1.0\",\n    \"helmet\": \"^8.1.0\",\n    \"morgan\": \"^1.10.0\"\n  },\n  \"devDependencies\": {\n    \"@types/cors\": \"^2.8.19\",\n    \"@types/express\": \"^5.0.3\",\n    \"@types/morgan\": \"^1.9.10\",\n    \"@types/node\": \"^24.0.3\",\n    \"nodemon\": \"^3.1.10\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^5.8.3\"\n  }\n}\n```\n\n### TypeScript Configuration (tsconfig.json)\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"ES2022\"],\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"moduleResolution\": \"node\",\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"sourceMap\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\", \"**/*.test.ts\"]\n}\n```\n\n### Basic Express Server Structure\n```typescript\nimport express, { Express, Request, Response, NextFunction } from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst app: Express = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors({\n  origin: process.env.CORS_ORIGIN || 'http://localhost:5173',\n  credentials: true\n}));\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(morgan('dev'));\n\n// Health check endpoint\napp.get('/health', (_req: Request, res: Response) => {\n  res.json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// Error handling middleware\napp.use((err: Error, _req: Request, res: Response, _next: NextFunction) => {\n  console.error('Error:', err);\n  res.status(500).json({\n    error: {\n      message: err.message || 'Internal server error',\n      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n    }\n  });\n});\n\n// 404 handler\napp.use((req: Request, res: Response) => {\n  res.status(404).json({\n    error: {\n      message: 'Not found',\n      path: req.path\n    }\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);\n  console.log(`ðŸ“Š Environment: ${process.env.NODE_ENV || 'development'}`);\n});\n```\n\n### Folder Structure\n```\nsrc/backend/\nâ”œâ”€â”€ .env.example\nâ”œâ”€â”€ .gitignore\nâ”œâ”€â”€ nodemon.json\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ tsconfig.json\nâ””â”€â”€ src/\n    â”œâ”€â”€ index.ts\n    â”œâ”€â”€ routes/\n    â”œâ”€â”€ services/\n    â”œâ”€â”€ models/\n    â”œâ”€â”€ middleware/\n    â””â”€â”€ utils/\n```\n\n### Key Points:\n1. TypeScript strict mode enabled for better type safety\n2. Security middleware (helmet) configured\n3. CORS configured for frontend communication\n4. Morgan for request logging\n5. Proper error handling with development stack traces\n6. Environment variables support with dotenv\n7. Nodemon for development hot-reloading\n8. Prefix unused parameters with underscore to avoid TypeScript errors",
  "description": "Node.js TypeScript Express backend setup pattern with security middleware and proper project structure",
  "tags": [
    "backend",
    "nodejs",
    "typescript",
    "express",
    "setup",
    "boilerplate"
  ],
  "agentId": "builder",
  "timestamp": "2025-06-16T21:16:27.778Z"
}