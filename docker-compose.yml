version: '3.8'

services:
  # Core RAG Infrastructure
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./rag-system/vector-db/qdrant_storage:/qdrant/storage:z
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__TELEMETRY_DISABLED=true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - ./rag-system/vector-db/redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # MCP Servers
  knowledge-base:
    build:
      context: ./mcp-servers/knowledge-base-python
      dockerfile: Dockerfile
    container_name: mcp-knowledge-base
    ports:
      - "8080:8080"
    volumes:
      - ./rag-system/knowledge:/app/knowledge
      - ./shared:/app/shared
    environment:
      - KNOWLEDGE_ROOT=/app/knowledge
      - MCP_SERVER_PORT=8080
    restart: unless-stopped
    networks:
      - mcp-network
    depends_on:
      - redis

  vector-search:
    build:
      context: ./mcp-servers/vector-search-python
      dockerfile: Dockerfile
    container_name: mcp-vector-search
    ports:
      - "8081:8081"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - CACHE_TTL=3600
      - MCP_SERVER_PORT=8081
    restart: unless-stopped
    networks:
      - mcp-network
    depends_on:
      - qdrant
      - redis

  filesystem-secure:
    build:
      context: ./mcp-servers/security-wrapper
      dockerfile: Dockerfile
    container_name: mcp-filesystem-secure
    ports:
      - "8082:8082"
    volumes:
      - ./git-worktrees:/app/git-worktrees
      - ./shared:/app/shared
      - ./logs:/app/logs
    environment:
      - SECURITY_CONFIG=/app/security-config.json
      - AUDIT_LOG=/app/logs/filesystem-audit.log
      - MCP_SERVER_PORT=8082
    restart: unless-stopped
    networks:
      - mcp-network

  git-operations:
    build:
      context: ./mcp-servers/git-operations
      dockerfile: Dockerfile
    container_name: mcp-git-operations
    ports:
      - "8084:8084"
    volumes:
      - ./git-worktrees:/app/git-worktrees
      - ./shared:/app/shared
    environment:
      - MCP_SERVER_PORT=8084
    restart: unless-stopped
    networks:
      - mcp-network

  # Monitoring & Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - mcp-network
    depends_on:
      - prometheus

networks:
  mcp-network:
    driver: bridge

volumes:
  qdrant_storage:
  redis_data:
  prometheus_data:
  grafana_data: